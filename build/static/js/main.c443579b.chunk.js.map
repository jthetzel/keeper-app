{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/firebase-config.js","components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","CreateArea","useState","isExpanded","setIsExpanded","note","setNote","handleChange","event","target","name","value","prevNote","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","require","config","firebaseConfig","apiKey","process","API_KEY","authDomain","projectId","storageBucket","messagingSenderId","appId","APP_ID","measurementId","app","initializeApp","db","getFirestore","App","notes","setNotes","clicked","setClicked","collectionRef","collection","useEffect","a","getDocs","data","docs","map","doc","getTasks","addNote","newNote","addDoc","deleteNote","taskRef","deleteDoc","key","ReactDOM","render","document","getElementById"],"mappings":"mSAWeA,MARf,WACE,OACE,gCACE,4BAAI,kBAAC,IAAD,MAAJ,YCKSC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACE,+CAAgBF,K,iBCYPG,MAff,SAAcC,GAMZ,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BAAQC,QATZ,WAEEJ,EAAMK,SAASL,EAAMM,MAOW,kBAAC,IAAD,S,wCCmDrBC,MA3Df,SAAoBP,GAElB,MAAkCQ,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,EAAwBF,mBAAS,CAC/BN,MAAO,GACPC,QAAS,KAFX,mBAAOQ,EAAP,KAAaC,EAAb,KAKA,SAASC,EAAaC,GACpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdL,GAAQ,SAACM,GACP,OAAO,2BACFA,GADL,kBAEGF,EAAOC,OAiBd,OACE,6BACE,0BAAMhB,UAAU,eACbQ,EACD,2BACEO,KAAK,QACLG,SAAUN,EACVI,MAAON,EAAKT,MACZkB,YAAY,UAEd,KACA,8BACEJ,KAAK,UACLZ,QAhBR,WACEM,GAAc,IAgBRS,SAAUN,EACVI,MAAON,EAAKR,QACZiB,YAAY,iBACZC,KAAMZ,EAAY,EAAG,IAEvB,kBAACa,EAAA,EAAD,CAAMC,GAAId,GACR,kBAACe,EAAA,EAAD,CAAKpB,QAhCb,SAAoBU,GAClBd,EAAMyB,MAAMd,GACZC,EAAQ,CACNV,MAAO,GACPC,QAAS,KAEXW,EAAMY,mBA0B0B,kBAAC,IAAD,W,gBCvDpCC,EAAQ,IAAUC,SAElB,IAAMC,EAAiB,CACnBC,OAAQC,8CAAYC,QACpBC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,cACnBC,MAAON,8CAAYO,OACnBC,cAAe,gBAIbC,EAAMC,YAAcZ,GAEba,EAAKC,YAAaH,G,QC0ChBI,MAnDf,WACE,MAA0BpC,mBAAS,IAAnC,mBAAOqC,EAAP,KAAcC,EAAd,KAGA,EAA8BtC,oBAAS,GAAvC,mBAAOuC,EAAP,KAAgBC,EAAhB,KACMC,EAAgBC,YAAWR,EAAI,SAErCS,qBAAU,SAACF,IACK,uCAAG,4BAAAG,EAAA,sEACIC,YAAQJ,GADZ,OACTK,EADS,OAGfR,EAASQ,EAAKC,KAAKC,KAAI,SAACC,GAAD,mBAAC,eAAWA,EAAIH,QAAhB,IAAwBhD,GAAKmD,EAAInD,SAHzC,2CAAH,qDAKdoD,GACAV,GAAW,KACV,CAACD,IAGJ,IAAMY,EAAO,uCAAG,WAAOC,GAAP,SAAAR,EAAA,6DACdJ,GAAW,GADG,SAERa,YAAOZ,EAAeW,GAFd,2CAAH,sDAKPE,EAAU,uCAAG,WAAOxD,GAAP,eAAA8C,EAAA,6DAEXW,EAAUN,YAAIf,EAAI,QAASpC,GACjC0C,GAAW,GAHM,SAIXgB,YAAUD,GAJC,2CAAH,sDAOhB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYtC,MAAOkC,IAElBd,EAAMW,KAAI,SAAC7C,GACV,OACE,kBAAC,EAAD,CACEsD,IAAKtD,EAAKL,GACVA,GAAIK,EAAKL,GACTJ,MAAOS,EAAKT,MACZC,QAASQ,EAAKR,QACdE,SAAUyD,OAIhB,kBAAC,EAAD,QClDNI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c443579b.chunk.js","sourcesContent":["import React from \"react\";\nimport HighlightIcon from '@material-ui/icons/Highlight';\n\nfunction Header() {\n  return (\n    <header>\n      <h1><HighlightIcon />Keeper</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nfunction Note(props) {\n  function handleClick() {\n    // Passing the id of the note that was clicked\n    props.onDelete(props.id);\n  }\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button onClick={handleClick}><DeleteIcon /></button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\"\nimport Zoom from \"@material-ui/core/Zoom\"\n\nfunction CreateArea(props) {\n\n  const [isExpanded, setIsExpanded]=useState(false);\n\n  const [note, setNote] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n\n    setNote((prevNote) => {\n      return {\n        ...prevNote,\n        [name]: value\n      };\n    });\n  }\n\n  function submitNote(event) {\n    props.onAdd(note);\n    setNote({\n      title: \"\",\n      content: \"\"\n    });\n    event.preventDefault();\n  }\n\n  function expand(){\n    setIsExpanded(true)    \n  }\n  return (\n    <div>\n      <form className=\"create-note\">\n        {isExpanded? \n        <input\n          name=\"title\"\n          onChange={handleChange}\n          value={note.title}\n          placeholder=\"Title\"\n        />:\n        null}\n        <textarea\n          name=\"content\"\n          onClick={expand}  \n          onChange={handleChange}\n          value={note.content}\n          placeholder=\"Take a note...\"\n          rows={isExpanded? 3: 1}\n        />\n        <Zoom in={isExpanded}>\n          <Fab onClick={submitNote}><AddIcon /></Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from '@firebase/firestore'\r\nrequire('dotenv').config()\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.API_KEY,\r\n    authDomain: \"keeper-app-ac291.firebaseapp.com\",\r\n    projectId: \"keeper-app-ac291\",\r\n    storageBucket: \"keeper-app-ac291.appspot.com\",\r\n    messagingSenderId: \"42140009293\",\r\n    appId: process.env.APP_ID,\r\n    measurementId: \"G-0N1BLQYHMS\"\r\n};\r\n\r\n// Connecting to firebase\r\nconst app = initializeApp(firebaseConfig);\r\n// Connecting to firestore\r\nexport const db = getFirestore(app)\r\n// Also we need to use this db varibale outside this file, so we need to export it\r\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport {db} from \"./firebase-config\"\nimport {addDoc, collection, deleteDoc, doc, getDocs} from \"firebase/firestore\"\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n  // I need a way to keep track of the state of the button (whether it was clicked or not)\n  // If it is clicked, I need to fetch data from the db\n  const [clicked, setClicked] = useState(false)\n  const collectionRef = collection(db, \"tasks\")\n  \n  useEffect((collectionRef) => {\n    const getTasks = async ()=>{\n      const data = await getDocs(collectionRef);\n      // For every doc in the collection, I'm going to return a js object containing the data in the doc\n      setNotes(data.docs.map((doc)=>({...doc.data(), id : doc.id})))\n    };\n    getTasks();\n    setClicked(false)\n  }, [clicked])\n  \n\n  const addNote = async (newNote) => {\n    setClicked(true);\n    await addDoc(collectionRef, newNote);\n  }\n\n  const deleteNote = async (id) => {\n    // Since we are doing an action specfic to a specfic document, we need to be able to identify that doc\n    const taskRef = doc(db, \"tasks\", id)\n    setClicked(true);\n    await deleteDoc(taskRef);\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} />\n      {/* The notes variable contains an array of js objects */}\n      {notes.map((note) => {\n        return (\n          <Note\n            key={note.id}\n            id={note.id}\n            title={note.title}\n            content={note.content}\n            onDelete={deleteNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}